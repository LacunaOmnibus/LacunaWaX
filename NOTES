
BUILDING THE EXECUTABLE WITH CAVA PACKAGER {#{{{


    A number of players are either unable or unwilling to install, configure, 
    and run Perl programs.  By packaging LacunaWaX up using Cava packager, we 
    can produce an executable installer that runs (on Windows) without the 
    need for the user to do anything other than run that installer.


    - Install Cava Packager
        - http://www.cavapackager.com/

    - A Cava project file contains full paths to files, so the existing Cava 
      project file won't be valid for your machine.  You'll need to copy the 
      Cava project template and then make some changes to it.

    - Copy ROOT/Cava/ProjectTemplate/ to a new directory (eg ROOT/Cava/my_cava/)

    - Start Cava Packager; use it to open my_cava/cava20.cpkgproj.  
    
    - The first two leaves in the tree in the left pane, 'Executables' and 
      'Scripts', will be empty.  You're going to need to add to both of those 
      leaves.
        - Scripts
            - Using the green Plus icon in the upper-right, add the following 
              scripts (found in LacunaWaX/bin/):
                - LacunaWaX.pl
                - post_install_script.pl
                - rescue_lost_window.pl
                - Schedule_archmin.pl
                - Schedule_autovote.pl
                - Schedule_lottery.pl
                - Schedule_train_spies.pl
        - Executables
            - The executables created are based off of the scripts you added in 
              the previous step, so you must do this second.  Add each of the 
              scripts from above, EXCEPT for post_install_script.pl, as 
              executables.
            - After you've added the executables, click on each one in the left 
              pane's tree
                - Set LacunaWaX.exe as a GUI executable.  The others should 
                  remain as Console executables.
                - Add icons to each executable
                    - There are Futurama-based .ico files in ROOT/unpackaged 
                      assets/.  I tend to prefer Frai for LacunaWaX.exe, Leela 
                      for the Schedule_* programs, and Farnsworth for the Rescue 
                      program, but you can use any combination of icons you 
                      prefer.
            - Update the 'Executable Class Id' for LacunaWaX.exe
                - Click the ... button to the right of Executable Class Id and 
                  choose to Enter your own, and paste the following:
                    CFA9E4F9-9CB0-1020-AAC5-BF3F2B732F6F

                - Cava auto-generates class IDs for each executable, but part of 
                  the install process is looking for the ID above in the 
                  registry to determine whether a given install is an upgrade.
                - If you wish to use a different Class ID for any reason, you'll 
                  want to edit the $class_id variable at the top of 
                  post_install_script.pl.

    - You should now be set to Scan and Build Project (purple icon in the center 
      of Cava's toolbar).  Just click it and it will grind away.  On my machine, 
      the project build process takes several minutes.
        - When the process is complete, you'll find that ROOT/Cava/my_cava/ now 
          contains several new directories, including installer/, in which 
          you'll find LacunaWaX-setup.exe, which is your installer program.  


    - If you've made any changes to the database schemas in 
      lib/LacunaWaX/Model/Schema.pm or lib/LacunaWaX/Model/LogsSchema.pm, you 
      MUST edit post_install_script.pl - see the note about it below.

    - post_build.pl {#{{{
        This gets run on your machine when you scan and build from Cava, so 
        there's no need to generate an .exe from it (it does not ever run on the 
        user's machine as part of the install process, ONLY on your machine as 
        part of Cava's build process).

        - Sets the version of the generated executable based on 
          $LacunaWaX::VERSION.

        - Removes your personal databases, which were copied to Cava's user/ 
          directory as part of the build process.
    }#}}}
    - post_install.pl {#{{{
        This gets run on the user's machine after they run the installer.

        - Generates the SQLite schema needed by the executables.  If the user is 
          performing an upgrade over a previous installation, the databases are 
          _not_ re-created, so the user's previous preferences are maintained.

            - If your new version of the program introduced any schema changes:
                - See create_tables_and_indexes(), which is calling 
                  tables_1point0() and tables_1point1().
                - If your schema change involved adding new tables, you can 
                  simply create tables_1point2() (use the current MINOR 
                  version number instead of '2') and ensure that 
                  create_tables_and_indexes() calls it, following the existing 
                  structure.
                - However, if your schema changes involve changing existing 
                  tables, you'll need to see fix_old_tables(), and add code 
                  there to either alter the existing tables, or simply 
                  re-create new versions of the existing tables, and copy the 
                  user's data over from their old tables to your new structure 
                  as needed (and then drop those old tables).

        - After ensuring that the schemas exist, some default data is added to 
          the tables.  This includes the list of known game servers (us1 and 
          pt), as well as a list of known space stations
            - If you're not a member of S.M.A., the known stations list isn't 
              hurting anything, but it's not helping either.
            - You should, in that case, edit lib/LacunaWaX/Model/DefaultData.pm 
              and add your own alliance's space stations to that list.
    }#}}}

}#}}}
CACHE MAP {#{{{

    These are the keys stored in LacunaWaX's CHI cache.  

    LacunaWaX::Model::Client.pm stores much of the data it pulls from the 
    server in this cache to cut down on RPC usage.

    This cache map will only be useful if you're working on that Client.pm 
    module.

    - Words in all caps below are static strings.
    - 'glc' indicates a Games::Lacuna::Client object.
    - 'myclient' indicates a LacunaWaX::MyClient object.
    - $pid is a planet ID.
    - $bid is a building ID
    - $aid is an alliance ID

    - ALLIANCE_ID
        - This is the ID of the current LacunaWaX user's alliance.

    - ALLIANCE:$aid
        - This is the alliance object of the alliance identified by ALLIANCE_ID, above.

    - ALLIANCE_PROFILE:$aid
        - This is the profile of the alliance identified by ALLIANCE_ID, above.

    - BODIES:$pid
        - glc->body(id => $pid);

    - BODIES:BUILDINGS:$pid
        - Hashref of all buildings onsite.
        - $planet_obj->get_buildings->{'buildings'};

    - BODIES:BUILDINGS:OBJECTS:$pid:$bid
        - $pid in the key isn't really necessary since a $bid is unique, but 
          increases clarity.
        - glc->building(id => $bid, type => $type);

    - BODIES:BUILDINGS:VIEWS:$pid:$bid
        - $pid in the key isn't really necessary since a $bid is unique, but 
          increases clarity.
        - Creates $bldg from $bid or gathers it from the BUILDINGS:OBJECT cache 
          above, then stores $bldg->view();

    - BODIES:GLYPHS:$pid
        - AoH.  One H for each glyph type, containing:
            { name => 'beryl', quantity => 10 };

        - Not simply the return from a server call of 'get_glyphs_summary', 
          since this will contain one H /for each glyph type/, even those we 
          have zero of on-planet.

    - BODIES:SHIPS:$pid
        - All ships on this body, regardless of type, task, etc.

    - BODIES:SHIPS:AVAILABLE:$types:$pid
        - $types is an arrayref of ships you're interested in.  Its contents get 
          sorted and joined with colons, so the actual key might be something 
          like:
                BODIES:SHIPS:AVAILABLE:fighter:scow:sweeper:$pid
        - AVAILABLE indicates that we were only looking for 'Docked' ships.  Any 
          that are traveling or orbiting or whatever will not be included.

    - BODIES:SPIES:$pid
        - All spies born on this planet

    - BODIES:STATUS:$pid
        - This will contain info like 'id', 'x', 'y', 'star_id', etc on the 
          planet $pid.
        - $body->get_status->{'body'};

    - LOTTERY:OPTIONS
        - $ent_dist->get_lottery_voting_options->{'options'};
        - so
            { 
                name => 'My Website Name',
                url => 'URL to lacunaexpanse redirect which will record vote and send me to My Website Name'
            }
        - The URLs recorded will contain the building_id of the entertainment 
          district that first accessed the links.  If you want to play the 
          lottery in a different zone, you'll need to change those building IDs.  
          See LacunaWaX::Model::Links::change_planet() to do that.

}#}}}
CODE STYLE {#{{{
    FOLDING {#{{{
    
        Throughout the code you'll find blocks that begin and end with what 
        appear to be excess curly braces:

        sub example {#{{{    <---
            
        }#}}}                <---

        ...you can see quite a few of them in this file.  Those are the code 
        folding markers used by vim.

        If you're using vim and are not familiar with code folding, you can turn 
        it on with
            :set fdm=marker
    
        More info on vim folding here: http://vim.wikia.com/wiki/Folding


        If you're using other-than-vim (first thing, shame on you!), your editor 
        may or may not provide code folding facilities.  If it does, just tell 
        it that start fold markers are "{{{", and end fold markers are "}}}" 
        (sans quotes).

        If you are using an editor other than vim, and know how to set up the 
        fold markers for your chosen editor, you're encouraged to add a short 
        chunk of instructions for how to do so here.


        There's certainly no requirement to fold your code.  I personally find 
        it convenient.  If you don't like folding, don't use it, but please 
        don't muck about with the existing fold markers.

    }#}}}
    INDENTATION AND STYLING {#{{{
        Please maintain an indent level of four spaces.

        I'm well aware that different people like different indent levels, or 
        tabs instead of spaces.  I'm not interested in a holy war over which is 
        better; I tend to believe that the one you like is "better".

        However, this codebase is already using four spaces throughout; suddenly 
        introducing a different indent level or character is going to make all 
        of the indentation inconsistent and ugly.

        So when editing LacunaWaX code, please use four spaces.


        Other than indentation, I tend to prefer 1TBS/Stroustrup style:

            for( 1..10 ) {
                say "This is line $_";
                if( $_ % 2 ) {
                    say "    This line is odd.";
                }
                else {
                    say "    This line is even.";
                }
            }
        
        Use whatever style makes you happy, as it's consistent and readable 
        (and you maintain an indent level of four spaces).  But be aware that 
        If you submit code and I go to fool with it for any reason, I'm highly 
        likely to change whatever style you used.

    }#}}}
}#}}}
CREDITS {#{{{

    - Chodes Empire
        - 11/31/2012 - found bug with rearranger panel's reload button resetting 
          to initial state, even after successful building move (fixed 
          11/31/2012)

    - Galactic Enterprise
        - Not sure of the date anymore, but he requested the return of spy 
          renaming (several times!) so now it's back.

    - GrayElf
        - 04/25/2013 - suggestion led me to add hyperlinks to the lottery page

    - Newpyre
        - 03/20/2013 - found that individual spies could no longer be assigned 
          to tasks.  Also found that spies assigned to Counter _were_ being trained 
          by the training scheduler.

    - Silmarilos
        - ~02/2013   - Requested expand/collapse of left-pane tree
        - 02/20/2013 - Requested Build All Halls button
        - 02/18/2013 - Found casing error when attempting to set up a planet 
          containing capital letters as the glyphs push target.  Stupid error, 
          good find.

    - The New Vasari Collective
        - ~01/2012   - Got access to source, which caused me to clean up quite a 
          bit.
        - 12/06/2012 - Tested LacunaWaX on Windows 7.

}#}}}
DATABASE {#{{{

- user/lacuna_log.sqlite
    - Tables
        - Logs
            - Attached to a Log::Dispatch::DBI output while the app is running.  
              All log entries end up in this table.
            - Log entries older than 7 days get auto-pruned.
            - See lib/LacunaWaX/Model/DBILogger.pm for details.


- user/lacuna_app.sqlite
    The main database used by the app.

    - All game passwords maintained by LacunaWaX must be passed to the game 
      server, and are therefore stored as plain text.

    - Tables
        - AppPrefsKeystore
            - Meant to be a generic holding area for config-type values that 
              need to persist between runs.
        - BodyTypes
            - type_general
                - This is only meant to distinguish bodies that are Space 
                  Stations from everything else.  Once any body has had 
                  body_status called on it, we're recording whether it's an SS 
                  or not.
        - LotteryPrefs
            - How many lottery links should be clicked (played) per planet
        - ScheduleAutovote
            - determines how autovote should be applied to ALL space stations on 
              this server.  Based on who submitted the proposal; either the 
              station Owner or All (anybody else), or None (no autovote).
        - Servers
            - 'name' gets displayed as-is in the Preferences select menu.
        - ServerPrefs
            - User's login credentials per server.  Editable by the user through 
              the Edit...  Prefs window.
        - Sitter Passwords
            - Contains the sitter accounts entered by the user.

}#}}}
EXTENDING MOOSE CLASSES {#{{{
    This should work just fine:
        extends 'LacunaWaX::Dialog::Scrolled';
    ...and it does if you're just running LacunaWaX through Perl.

    But the lack of a 'use' statement confuses Cava packager, and you'll end up 
    with a "not in @INC" error upon running the produced .exe

    Even forcing Cava to include that Scrolled.pm module continues to cause 
    confusion.

    So, just for Cava's sake:
        use LacunaWaX::Dialog::Scrolled;
        extends 'LacunaWaX::Dialog::Scrolled';
}#}}}
FOCUSING {#{{{
    
    The MainSplitterWindow and its children are jumping through some 
    focus-related hoops.  This is mainly to deal with the Glyphs screen.

        The result is, unfortunately, a bit of a mess with re: scrolling, and 
        should be cleaned up.  But when doing so, keep in mind the original 
        problem related to the ListCtrl, discussed below.

        "a bit of a mess" is being somewhat generous; the code that's dealing 
        with focusing is pretty damn horrid, and a better solution needs to be 
        found.


    By default, what was happening was:
        - When mousing into the Glyphs screen, the ListCtrl automatically took 
          scrollwheel focus, so that wheel just scrolled the List, not the 
          entire page, which is almost always what is wanted.

        - You had to click into one of the controls that accepted mouseclicks 
          (like a TextBox or Choice).  Just clicking on one of the StaticText 
          windows did nothing, since those don't accept mouseclicks.
            - This might well be incorrect.


    What I want:
        - When mouse enters the right pane, the scrollwheel should affect the 
          entire screen...

        - ...unless the mouse is actually over the ListCtrl - _then_ the  
          scrollwheel should affect that ListCtrl.

        - When the mouse hovers over the TreeCtrl on the left, it should respond 
          to the scrollwheel.


    To do the above: 
    
        - There is an event that triggers when the mouse moves over the right 
          pane (the ScrolledWindow).  This event sets focus on the planet name 
          (the StaticText header at the top), which removes focus from the 
          ListCtrl and allows us to scroll the screen.
            - There's a similar event to detect the mouse hovering over the 
              ListCtrl, which gives it back the scrollwheel focus.

        - The problem with focusing the header StaticText is if the right pane 
          is scrolled partway down and then fully loses focus, and then regains 
          it.  The event to focus that StaticText header will cause the screen 
          to autoscroll back to the top where the header is.  This is unexpected 
          and yucky.

        - So there's a second event triggered when the mouse leaves the 
          GlyphsPane.  This event simply records the (x, y) position of the 
          window (how far it's currently scrolled down).

        - I've added 'has_focus' attributes to both LeftPane.pm and 
          RightPane.pm.  I also added some focus-managing methods to 
          MainSplitterWindow.pm.
            - The existing WX focus events and methods relate to individual 
              windows (controls).  My attributes refer to the entire left and 
              right panes.

        - Now, when the GlyphsPane loses and then regains focus, which we can 
          determine by checking those new has_focus attributes, after setting 
          focus on its header StaticText, we can scroll the window back to its 
          last known scroll position.
            - This does result in a bit of a screen flash.  That's mostly been 
              taken care of by doing a Show(0) ... Show(1) on the screen while 
              adjusting the scroll.
            - There's still a minor screen flash, but it's only seen if that 
              GlyphsPane was scrolled down a bit, and it's quite minor now.

}#}}}
FONTS {#{{{

    - The default font families:
        - wxFONTFAMILY_DEFAULT
            - Untested
        - wxFONTFAMILY_ROMAN
            - Serif - Times New Roman.  Ugly.
        - wxFONTFAMILY_SWISS
            - Sans-serif, (Arial)
        - wxFONTFAMILY_DECORATIVE
            - Appears to be comic sans.  Ick.
        - wxFONTFAMILY_MODERN
            - Fixed Width
        - wxFONTFAMILY_SCRIPT
            - Actually cursive.  Hideous.

    - There's no way to just include a font file with your app and force it to 
      be used.  You can supply a font file and ask the user to install it, or 
      provide a font picker (wxFontDialog) to let the user pick what font they 
      want 
      (http://stackoverflow.com/questions/7596448/how-to-include-and-use-new-fonts-in-wxwidgets-projet), 
      or you could just try using a fairly common font, but make sure to provide 
      a valid font family in that case as fallback.

    - Search this file for 'header_1' for an example of using a user-installed 
      font instead of the defaults I'm using now.
}#}}}
IMAGES {#{{{
    - When trying to build an ImageList:
        "couldn't add an image to the image list"
            - This is an irritating, useless error message.  What's probably 
              happening is that the image(s) you're trying to load doesn't match 
              the size assigned to the ImageList's constructor:
    
            my $list = Wx::ImageList->new( 50, 50, 0, 1 );

        ...the image you add to this list had betterfreakinwell be 50x50 pixels 
        or it won't load and you'll get the error above.
}#}}}
INSTALLING WX {#{{{

    On Windows, using ActiveState Perl, I've added the wxperl repo 
    (http://www.wxperl.co.uk/repository) and installed all my Wx stuff from 
    there.  I uninstalled the AS stuff.  Yes, PPM still works.

    All of this was done quite a long time ago and decent notes were not 
    maintained while doing it.  If you're installing Wx on Windows, add your 
    experiences here.

    I'm pretty sure that I've got wx 2.8 installed.  I believe I tried 
    installing 2.9 on Windows 8 and it blew up in my face.  I believe I need 
    to nail this shit down so I can stop equivocating.


    On Ubuntu, I also installed Wx without taking notes, but don't recall 
    having significant problems with it.

    However, another user did experience issues after installing Wx on a 
    Perlbrew installation on Ubuntu.  The issue was resolved by editing
        ~/perlbrew/build/perl-VERSION/utils/xsubpp (~line 41)
            From:
                exit( ExtUtils::ParseXS::errors() ? 1 : 0 );
            ...to...
                exit( ExtUtils::ParseXS::report_error_count() ? 1 : 0 );

    Keep in mind that I did not have to do this to get Wx working.  So install 
    Wx using CPAN and try running LacunaWaX without making the above fix 
    first.
}#}}}
LICENSE {#{{{
    The LICENSE.txt file has an extension on it because Cava packager requires 
    it.
}#}}}
KNOWN BUGS {#{{{

    - On some versions of Ubuntu, warnings are produced on app exit
            - LIBDBUSMENU-GLIB-WARNING **: Trying to remove a child that doesn't believe we're it's parent.
        - This is a known Ubuntu/wxWidgets bug related to the app menu, and is 
          ugly but harmless to the app.

}#}}}
MENU {#{{{

    Most of my Moose classes are wrappers around the associated Wx classes.  So 
    (eg) MainFrame.pm itself is not a Wx::Frame, but it contains a Wx::Frame:

        my $mainframe = MainFrame->new(...);
        $mainframe->frame();   # This is the actual Wx::Frame object.

    The menu bar is a bit different; the menu items are actually extending 
    Wx::Menu:
    
        my $menuhelp = Menu::Help->new(...);
        $menuhelp;            # This is the actual Wx::Menu object

    This is the better way to go, but it's likely to get confusing, as you 
    have to call on the correct attribute ($mainframe->frame) to get at the Wx 
    thingy for some classes, but you'll be calling on the object itself 
    ($menuhelp) to get at the Wx thingy for the menus.

    This is definitely inconsistent and bad.  Subsequent changes should work 
    towards extending Wx windows the way that Menu/* are doing it.

}#}}}
SCHEDULED TASK EXECUTABLES {#{{{

    - as Console executables
        - When run, they create CMD windows
    - as GUI executables
        - They run fine and don't create CMD windows
        - BUT they crash when they end, producing a horrid Windows crash popup.  

    - So I'm making them Console executables.  When scheduled:
        - The user needs to accept that random CMD windows will pop up at them 
          every time a scheduled task runs (Ick)
        - OR, the tasks should be set to run as a second windows user, in 
          which case the CMD window pops up for that user, not the actual 
          current user
            - This requires setup of that second windows (administrative) 
              user, which is a good bit to ask just to set up a scheduled task
        - OR, the tasks should be set to run 'hidden'.
            - I think that Windows 7 provides this option
            - Splinterware's free System Scheduler definitely provides this 
              option, and is what I'm currently advocating.

}#}}}
VERSIONING SCHEME {#{{{

    The versioning scheme used by LacunaWaX is
        MAJOR.MINOR.[BUGFIX.]REVISION

    MAJOR changes indicate a major or non-BC change in the overall app.

    MINOR, if odd, indicates a beta version.  If even, indicates a stable 
    version.
        - Program versions including a new feature generally get a MINOR 
          version increase.

    BUGFIX will generally not exist at all, leaving 3 "bytes" in the version 
    string.  However, if a bug is found and fixed in a previously-released 
    stable version, an even bugfix number may be released:
        1.4.2345 -> whoops found and fixed a bug -> 1.4.2.2345
        
    REVISION is updated automatically by Subversion upon commit.
        - git is a bit obstinate regarding source code keyword expansion.  It 
          can be done, but git recommends against it.  So once this is added to 
          github, the REVISION byte in the version string may simply go away.


    The Cava GUI has a section where you can specify the version number, and 
    include the version in the name of the produced installer if you wish.

    LacunaWaX is not using that.

    post_build.pl is setting the compiled-in version number as the .exe gets 
    built, from $LacunaWaX::VERSION.  So Help... About... shows that version. 

    This is nice and programmatic and doesn't require any manual version number 
    twiddling.  

    BUT, with the version number being set post-build, it's not available to the 
    Cava packager GUI.  So just ignore the version setting there, and don't have 
    Cava append the version number to the produced installer's filename.  It'll 
    be wrong.
}#}}}

